// Generated by gencpp from file lab3/BakeCakeFeedback.msg
// DO NOT EDIT!


#ifndef LAB3_MESSAGE_BAKECAKEFEEDBACK_H
#define LAB3_MESSAGE_BAKECAKEFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lab3
{
template <class ContainerAllocator>
struct BakeCakeFeedback_
{
  typedef BakeCakeFeedback_<ContainerAllocator> Type;

  BakeCakeFeedback_()
    : cake_baked(0)  {
    }
  BakeCakeFeedback_(const ContainerAllocator& _alloc)
    : cake_baked(0)  {
  (void)_alloc;
    }



   typedef int64_t _cake_baked_type;
  _cake_baked_type cake_baked;





  typedef boost::shared_ptr< ::lab3::BakeCakeFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lab3::BakeCakeFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct BakeCakeFeedback_

typedef ::lab3::BakeCakeFeedback_<std::allocator<void> > BakeCakeFeedback;

typedef boost::shared_ptr< ::lab3::BakeCakeFeedback > BakeCakeFeedbackPtr;
typedef boost::shared_ptr< ::lab3::BakeCakeFeedback const> BakeCakeFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lab3::BakeCakeFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lab3::BakeCakeFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lab3::BakeCakeFeedback_<ContainerAllocator1> & lhs, const ::lab3::BakeCakeFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.cake_baked == rhs.cake_baked;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lab3::BakeCakeFeedback_<ContainerAllocator1> & lhs, const ::lab3::BakeCakeFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lab3

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::lab3::BakeCakeFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lab3::BakeCakeFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lab3::BakeCakeFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lab3::BakeCakeFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lab3::BakeCakeFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lab3::BakeCakeFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lab3::BakeCakeFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d07d0961a6435407e0940bb5c723c2f2";
  }

  static const char* value(const ::lab3::BakeCakeFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd07d0961a6435407ULL;
  static const uint64_t static_value2 = 0xe0940bb5c723c2f2ULL;
};

template<class ContainerAllocator>
struct DataType< ::lab3::BakeCakeFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lab3/BakeCakeFeedback";
  }

  static const char* value(const ::lab3::BakeCakeFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lab3::BakeCakeFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"int64 cake_baked\n"
"\n"
;
  }

  static const char* value(const ::lab3::BakeCakeFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lab3::BakeCakeFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cake_baked);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BakeCakeFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lab3::BakeCakeFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lab3::BakeCakeFeedback_<ContainerAllocator>& v)
  {
    s << indent << "cake_baked: ";
    Printer<int64_t>::stream(s, indent + "  ", v.cake_baked);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LAB3_MESSAGE_BAKECAKEFEEDBACK_H
